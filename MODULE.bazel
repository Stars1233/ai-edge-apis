"""Bazel build and test dependencies."""

module(
    name = "ai_edge_apis",
    version = "0.1.0",
    repo_name = "ai_edge_apis",
)

bazel_dep(name = "abseil-cpp", version = "20250127.1")
bazel_dep(name = "platforms", version = "0.0.11")
bazel_dep(name = "protobuf", version = "29.3")
bazel_dep(name = "rules_android", version = "0.6.3")
bazel_dep(name = "rules_android_ndk", version = "0.1.3")
bazel_dep(name = "rules_cc", version = "0.1.2")
bazel_dep(name = "rules_jvm_external", version = "6.7")
bazel_dep(name = "rules_python", version = "1.2.0")
bazel_dep(name = "googleapis-java", version = "1.0.0")
bazel_dep(name = "googleapis", version = "0.0.0-20241220-5e258e33.bcr.1")
bazel_dep(name = "rules_java", version = "8.11.0")
bazel_dep(name = "re2", version = "2024-07-02.bcr.1")
bazel_dep(name = "rules_jni", version = "0.10.3")

android_ndk_repository_extension = use_extension("@rules_android_ndk//:extension.bzl", "android_ndk_repository_extension")
use_repo(android_ndk_repository_extension, "androidndk")

register_toolchains("@androidndk//:all")

non_module_dependencies = use_extension("//:extensions.bzl", "non_module_dependencies")
use_repo(non_module_dependencies, "ai_edge_apis_rag_pipeline_x86_64_libtext_chunker_jni_so")
use_repo(non_module_dependencies, "ai_edge_apis_rag_pipeline_android_arm64_libtext_chunker_jni_so")
use_repo(non_module_dependencies, "ai_edge_apis_rag_pipeline_x86_64_libsqlite_vector_store_jni_so")
use_repo(non_module_dependencies, "ai_edge_apis_rag_pipeline_android_arm64_libsqlite_vector_store_jni_so")
use_repo(non_module_dependencies, "ai_edge_apis_rag_pipeline_x86_64_libgecko_embedding_model_jni_so")
use_repo(non_module_dependencies, "ai_edge_apis_rag_pipeline_android_arm64_libgecko_embedding_model_jni_so")
use_repo(non_module_dependencies, "ai_edge_apis_rag_pipeline_x86_64_libgemma_embedding_model_jni_so")
use_repo(non_module_dependencies, "ai_edge_apis_rag_pipeline_android_arm64_libgemma_embedding_model_jni_so")
use_repo(non_module_dependencies, "ai_edge_apis_function_calling_x86_64_libjni_gemma_formatter_android_so")
use_repo(non_module_dependencies, "ai_edge_apis_function_calling_android_arm64_libjni_gemma_formatter_android_so")
use_repo(non_module_dependencies, "ai_edge_apis_function_calling_x86_64_libjni_llama_formatter_android_so")
use_repo(non_module_dependencies, "ai_edge_apis_function_calling_android_arm64_libjni_llama_formatter_android_so")
use_repo(non_module_dependencies, "ai_edge_apis_function_calling_x86_64_libjni_hammer_formatter_android_so")
use_repo(non_module_dependencies, "ai_edge_apis_function_calling_android_arm64_libjni_hammer_formatter_android_so")
use_repo(non_module_dependencies, "ai_edge_apis_function_calling_x86_64_libjni_fst_constraint_android_so")
use_repo(non_module_dependencies, "ai_edge_apis_function_calling_android_arm64_libjni_fst_constraint_android_so")

http_archive_dependencies = use_extension("//:extensions.bzl", "http_archive_dependencies")
use_repo(http_archive_dependencies, "rules_antlr")
use_repo(http_archive_dependencies, "antlr4")

http_jar_dependencies = use_extension("//:extensions.bzl", "http_jar_dependencies")
use_repo(http_jar_dependencies, "antlr4_tool")
use_repo(http_jar_dependencies, "javax_json")
use_repo(http_jar_dependencies, "stringtemplate4")
use_repo(http_jar_dependencies, "antlr3_runtime")
use_repo(http_jar_dependencies, "antlr4_runtime")

maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")
maven.install(
    artifacts = [
        "androidx.annotation:annotation:1.9.1",
        "com.google.auto.value:auto-value-annotations:1.11.0",
        "com.google.auto.value:auto-value:1.11.0",
        "com.google.android:android:4.1.1.4",
        "com.google.errorprone:error_prone_annotations:2.37.0",
        "com.google.guava:guava:33.3.1-android",
        "com.google.mediapipe:tasks-genai:0.10.23",
        "com.squareup.okhttp3:okhttp:4.12.0",
        "org.checkerframework:checker-qual:3.20.0",
        "org.json:json:20250107",
        "org.jspecify:jspecify:1.0.0",
    ],
    fetch_sources = True,
    repositories = [
        "https://maven.google.com",
        "https://dl.google.com/dl/android/maven2",
        "https://repo1.maven.org/maven2",
        "https://jcenter.bintray.com",
    ],
    version_conflict_policy = "pinned",
)
use_repo(maven, "maven")

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    ignore_root_user_error = True,
    python_version = "3.12",
)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "ai_edge_apis_pip_deps",
    python_version = "3.12",
    requirements_lock = "@//:requirements_lock.txt",
)
use_repo(pip, "ai_edge_apis_pip_deps")
