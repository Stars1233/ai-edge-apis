#ifndef THIRD_PARTY_ODML_GENAI_MODULES_FUNCTION_CALLING_CORE_STREAMING_H_
#define THIRD_PARTY_ODML_GENAI_MODULES_FUNCTION_CALLING_CORE_STREAMING_H_

#include <cstddef>
#include <functional>
#include <string>
#include <vector>

#include "absl/status/status.h"        // from @abseil-cpp
#include "absl/status/statusor.h"      // from @abseil-cpp
#include "absl/strings/string_view.h"  // from @abseil-cpp
#include "local_agents/core/proto/content.pb.h"
#include "local_agents/function_calling/core/model_formatter.h"

namespace odml::generativeai {

class ToolCallPredictFn {
 public:
  // The type of the user-defined callback.
  using Callback = std::function<void(odml::genai_modules::core::proto::Part)>;

  // Does not take ownership of formatter, which must outlive this object.
  explicit ToolCallPredictFn(Callback callback, ModelFormatter* formatter)
      : callback_(callback), formatter_(formatter) {}

  // Processes a token generated by the model.
  //
  // Text tokens are sent to the wrapped callback immediately. Tool calls
  // are parsed when they are fully generated before being sent to the wrapped
  // callback.
  //
  // Note: If the model generates an *incorrect* code fence start, the tool code
  // will be treated as ordinary text. This can be prevented by using
  // constrained decoding during generation.
  absl::Status operator()(absl::string_view token);

  // Returns the accumulated string of tokens.
  std::string AccumulatedOutput() { return acc_; }

  // Returns the substring of the model output that has not been passed to the
  // callback.
  std::string GetRemainder() { return acc_.substr(cursor_); }

 private:
  // Helper function to call the callback with a content `Part` containing text.
  void SendText(absl::string_view text);

  // Parses a tool code block.
  absl::StatusOr<std::vector<odml::genai_modules::core::proto::FunctionCall>>
  ParseToolCode(absl::string_view tool_code);

  // The callback that will be called with a content `Part` containing either
  // text or a function call.
  Callback callback_;

  // The formatter/parser is used to parse tool code blocks. Not owned.
  ModelFormatter* formatter_;

  // The accumulated string of tokens.
  std::string acc_;

  // The index of the next character in `acc_` to be processed.
  size_t cursor_ = 0;

  // Whether the end of `acc_` is inside a tool code block.
  bool inside_tool_call_ = false;
};

}  // namespace odml::generativeai

#endif  // THIRD_PARTY_ODML_GENAI_MODULES_FUNCTION_CALLING_CORE_STREAMING_H_
